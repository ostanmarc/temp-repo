global
    log /dev/log    local0
    log /dev/log    local1 notice
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

    # Default SSL material locations
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    # Default ciphers to use on SSL-enabled listening sockets.
    # For more information, see ciphers(1SSL). This list is from:
    #  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
    # An alternative list with additional directives can be obtained from
    #  https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=haproxy
    ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
    ssl-default-bind-options no-sslv3

defaults
    log       global
    mode      tcp
    option    tcplog
    option    dontlognull
    timeout   connect 5000
    timeout   client  14400000
    timeout   server  14400000

# It turns out that haproxy is prone to get stuck in a failed state when a dns request for a backend server address fails.
# In that case you can see in haproxy logs messages with "<NOSRV>" for example "app vzw_llabs_io_int/<NOSRV>".
# Because in this version of haproxy it is not possible to override resolving params without specifying nameservers
# we have to put there ip addresses of nameservers that are used in respective tools vpc.
# For more info look in following Jira ticket.
# https://butr.avast.com/browse/LUFT-1133?focusedCommentId=1900741&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-1900741
resolvers aws
{%- for ip in dns_ips %}
    nameserver vpc{{loop.index}} {{ip}}:53
{%- endfor %}
    resolve_retries       100
    timeout retry         30s
    hold valid            60s

frontend http
    bind *:80
    mode http
    redirect scheme https code 301

frontend app
    bind 0.0.0.0:443
    mode tcp
    option tcplog



    tcp-request inspect-delay 5s
    {% raw %}
    tcp-request content accept if { req.ssl_hello_type 1 }
    {% endraw %}

    {%-if github -%}
    acl is_github_enterprise    req.ssl_sni -i github.int.llabs.io
    use_backend github_enterprise  if is_github_enterprise
    {% endif %}

    acl is_wazuh_prod    req.ssl_sni -i wazuh.att.kube.llabs.io
    use_backend wazuh_prod  if is_wazuh_prod

    acl is_wazuh_test    req.ssl_sni -i wazuh.att.kube.dev.llabs.io
    use_backend wazuh_test  if is_wazuh_test

{% for peering_record in peering_records -%}
    {%- if peering_record.create_api_proxy %}
    acl is_{{ peering_record.friendly_name }}_api    req.ssl_sni -i {{ peering_record.proxy }}
    use_backend {{ peering_record.friendly_name }}_api  if is_{{ peering_record.friendly_name }}_api
    {% endif %}
    {%- if peering_record.wildcard is not none and peering_record.ingress is not none %}
    acl is_{{ peering_record.friendly_name }}_int    req.ssl_sni -i -m end {{ peering_record.wildcard }}
    use_backend {{ peering_record.friendly_name }}_int  if is_{{ peering_record.friendly_name }}_int
    {% endif %}
{%- endfor %}

{% for peering_record in peering_records -%}
{%- if peering_record.create_api_proxy %}
backend {{ peering_record.friendly_name }}_api
    mode tcp
    option tcp-check
    server server1 {{ peering_record.api }}:443 check port 443 resolvers aws inter 2000 fall 5 rise 2
{% endif %}
{%- if peering_record.wildcard is not none and peering_record.ingress is not none %}
backend {{ peering_record.friendly_name }}_int
    mode tcp
    option tcp-check
    server server1 {{ peering_record.ingress }}:443 check port 443 resolvers aws inter 2000 fall 5 rise 2
{% endif %}
{%- endfor %}

{%-if github -%}
backend github_enterprise
    mode tcp
    option tcp-check
    server server1 github.int.llabs.io:443 check port 443 resolvers aws inter 2000 fall 5 rise 2
{% endif %}

backend wazuh_prod
    mode tcp
    option tcp-check
    server server1 wazuh-master.att.kube.llabs.io:443 check port 443 resolvers aws inter 2000 fall 5 rise 2

backend wazuh_test
    mode tcp
    option tcp-check
    server server1 wazuh-master.att.kube.dev.llabs.io:443 check port 443 resolvers aws inter 2000 fall 5 rise 2
