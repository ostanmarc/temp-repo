global
    log /dev/log    local0
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    group haproxy
    daemon

    # Default SSL material locations
    ca-base /etc/ssl/certs

    # Default ciphers to use on SSL-enabled listening sockets.
    # For more information, see ciphers(1SSL). This list is from:
    #  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
    # An alternative list with additional directives can be obtained from
    #  https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=haproxy
    ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
    ssl-default-bind-options no-sslv3

defaults
    log       global
    option    tcplog
    timeout   connect 5000
    timeout   client  50000
    timeout   server  50000

resolvers aws
     nameserver vpc1 10.110.134.4:53
     nameserver vpc2 10.110.135.4:53
     resolve_retries       100
     timeout retry         30s
     hold valid            60s

frontend app
  bind 0.0.0.0:443
  mode tcp
  option tcplog

  tcp-request inspect-delay 5s
  tcp-request content accept if { req.ssl_hello_type 1 }

# TEST
  acl is_fakenews_api         req. -i proxy.api.4life.fakenews.llabs.io
  acl is_fakenews             .ssl_sni -i -m end .fakenews.llabs.io

  acl is_sfl2_api         req.ssl_sni -i proxy.api.k8s-sfl2.dev.sfl2.llabs.io
  acl is_sfl2             req.ssl_sni -i -m end .dev.sfl2.llabs.io

  acl is_att_test_api     req.ssl_sni -i proxy.api.att.kube.dev.llabs.io
  acl is_att_test_int     req.ssl_sni -i -m end .int.att.kube.dev.llabs.io

  acl is_vzw_test_api     req.ssl_sni -i proxy.api.vzw.kube.dev.llabs.io
  acl is_vzw_test_int     req.ssl_sni -i -m end int.vzw.kube.dev.llabs.io

  acl is_ott_test_api     req.ssl_sni -i proxy.api.ott.kube.dev.llabs.io
  acl is_ott_test_int     req.ssl_sni -i -m end int.ott.kube.dev.llabs.io

  acl is_kubelife_api     req.ssl_sni -i proxy.api.kubelife.dev.llabs.io
  acl is_kubelife_int     req.ssl_sni -i -m end .kubelife.dev.llabs.io

# PROD
  acl is_vzw_prod_api     req.ssl_sni -i proxy.api.k8s.vzw.llabs.io
  acl is_vzw_prod_int     req.ssl_sni -i -m end .int.vzw.llabs.io

  acl is_att_prod_api     req.ssl_sni -i proxy.api.k8s-att.att.llabs.io
  acl is_att_prod_int     req.ssl_sni -i -m end .int.att.llabs.io
  
  acl is_sprint_prod_api  req.ssl_sni -i proxy.api.k8s.sprint-int.llabs.io
  acl is_sprint_prod_int  req.ssl_sni -i -m end .int.sprint-int.llabs.io

#TEST
  use_backend fakenews_api if is_fakenews_api
  use_backend fakenews if is_fakenews

  use_backend sfl2_api if is_sfl2_api
  use_backend sfl2 if is_sfl2
  
  use_backend att_test_api if is_att_test_api
  use_backend att_test_int if is_att_test_int

  use_backend vzw_test_api if is_vzw_test_api
  use_backend vzw_test_int if is_vzw_test_int

  use_backend ott_test_api if is_ott_test_api
  use_backend ott_test_int if is_ott_test_int

  use_backend kubelife_api if is_kubelife_api
  use_backend kubelife_int if is_kubelife_int

# PROD
  use_backend vzw_prod_api if is_vzw_prod_api
  use_backend vzw_prod_int if is_vzw_prod_int

  use_backend att_prod_api if is_att_prod_api
  use_backend att_prod_int if is_att_prod_int

  use_backend sprint_prod_api if is_sprint_prod_api
  use_backend sprint_prod_int if is_sprint_prod_int


backend vzw_prod_api
  mode tcp
  option tcp-check
  server server1 api.k8s.vzw.llabs.io:443 check port 443 resolvers aws inter 2000 fall 5 rise 2

backend vzw_prod_int
  mode tcp
  option tcp-check
  server server1 ingress-int.vzw.llabs.io:443 check port 443 resolvers aws inter 2000 fall 5 rise 2

backend att_test_api
  mode tcp
  option tcp-check
  server server1 api.att.kube.dev.llabs.io:443 check port 443 resolvers aws inter 2000 fall 5 rise 2

backend att_test_int
  mode tcp
  option tcp-check
  server server1 ingress-int.att.kube.dev.llabs.io:443 check port 443 resolvers aws inter 2000 fall 5 rise 2

backend vzw_test_api
  mode tcp
  option tcp-check
  server server1 api.vzw.kube.dev.llabs.io:443 check port 443 resolvers aws inter 2000 fall 5 rise 2

backend vzw_test_int
  mode tcp
  option tcp-check
  server server1 ingress-int.vzw.kube.dev.llabs.io:443 check port 443 resolvers aws inter 2000 fall 5 rise 2

backend ott_test_api
  mode tcp
  option tcp-check
  server server1 api.ott.kube.dev.llabs.io:443 check port 443 resolvers aws inter 2000 fall 5 rise 2

backend ott_test_int
  mode tcp
  option tcp-check
  server server1 ingress-int.ott.kube.dev.llabs.io:443 check port 443 resolvers aws inter 2000 fall 5 rise 2

backend ott_ring_int
  mode tcp
  option tcp-check
  server server1 ingress-int.ring-dev-int.ott.dev.llabs.io:443 check port 443 resolvers aws inter 2000 fall 5 rise 2


backend kubelife_api
  mode tcp
  option tcp-check
  server server1 api.kubelife.dev.llabs.io:443 check port 443 resolvers aws inter 2000 fall 5 rise 2

backend kubelife_int
  mode tcp
  option tcp-check
  server server1 ingress-int.kubelife.dev.llabs.io:443 check port 443 resolvers aws inter 2000 fall 5 rise 2


backend att_prod_api
  mode tcp
  option tcp-check
  server server1 api.k8s-att.att.llabs.io:443 check port 443 resolvers aws inter 2000 fall 5 rise 2

backend att_prod_int
  mode tcp
  option tcp-check
  server server1 ingress-int.att.llabs.io:443 check port 443 resolvers aws inter 2000 fall 5 rise 2

backend fakenews_api
  mode tcp
  option tcp-check
  server server1 api.4life.fakenews.llabs.io:443 check port 443 resolvers aws inter 2000 fall 5 rise 2

backend sfl2_api
  mode tcp
  option tcp-check
  server server1 api.k8s-sfl2.dev.sfl2.llabs.io:443 check port 443 resolvers aws inter 2000 fall 5 rise 2

backend sprint_prod_api
  mode tcp
  option tcp-check
  server server1 api.k8s.sprint-int.llabs.io:443 check port 443 resolvers aws inter 2000 fall 5 rise 2

backend sprint_prod_int
  mode tcp
  option tcp-check
  server server1 ingress-int.sprint-int.llabs.io:443 check port 443 resolvers aws inter 2000 fall 5 rise 2

backend fakenews
  mode tcp
  option tcp-check
  server server1 ingress-int.fakenews.llabs.io:443 check port 443 resolvers aws inter 2000 fall 5 rise 2

backend sfl2
  mode tcp
  option tcp-check
  server server1 ingress-int.dev.sfl2.llabs.io:443 check port 443 resolvers aws inter 2000 fall 5 rise 2
